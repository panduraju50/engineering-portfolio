# GitHub Actions Workflow: Deploy to Dev and Tag

name: Deploy to Dev & Tag

on:
  pull_request:
    types: [closed] # Trigger when a pull request is closed
    branches:
      - main # Or your primary integration branch, e.g., master

jobs:
  deploy-and-tag:
    # Only run if the PR was merged (not just closed without merging)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push tags

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Fetch all history for all tags and branches
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew

    - name: Build Spring Boot application
      run: |
        cd backend
        ./gradlew build -x test # Skip tests if they ran in PR check

    # Placeholder: Build and Push Docker Image (tagged for dev)
    - name: Login to Docker Hub (Dev)
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME_DEV }} # Use separate dev credentials if needed
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_DEV }}
    - name: Build and push DEV Docker image
      id: docker_build_dev
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: yourdockerhubusername/portfolio-backend:dev-${{ github.run_number }} # Example dev tag
        # Or using a date-based tag:
        # tags: yourdockerhubusername/portfolio-backend:dev-$(date +%Y%m%d%H%M%S)

    # Placeholder: Deploy to Dev Kubernetes Environment
    - name: Deploy to Dev Environment
      run: |
        echo "Simulating deployment to DEV Kubernetes environment..."
        echo "Image to deploy: yourdockerhubusername/portfolio-backend:dev-${{ github.run_number }}"
        # Example using kubectl:
        # kubectl config set-context my-dev-cluster --namespace=dev-namespace
        # kubectl set image deployment/backend-dev-deployment backend-app=yourdockerhubusername/portfolio-backend:dev-${{ github.run_number }} -n dev-namespace
        # kubectl rollout status deployment/backend-dev-deployment -n dev-namespace

        # Example using Helm:
        # helm upgrade --install my-app-dev-release ./kubernetes/helm-charts/my-application \
        #   --namespace dev-namespace \
        #   --set image.repository=yourdockerhubusername/portfolio-backend \
        #   --set image.tag=dev-${{ github.run_number }} \
        #   --values ./kubernetes/helm-charts/my-application/values-dev.yaml

    - name: Create Git Tag
      run: |
        TAG_NAME="dev-$(date +%Y%m%d-%H%M%S)-run${{ github.run_number }}"
        echo "Creating tag: $TAG_NAME"
        git tag $TAG_NAME
        git push origin $TAG_NAME
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available
        # For pushing tags, ensure the workflow has appropriate permissions (contents: write)
        # or use a PAT with repo scope if GITHUB_TOKEN doesn't suffice for protected branches/tags.
